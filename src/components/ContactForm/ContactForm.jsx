import { useSelector, useDispatch } from 'react-redux';

import PropTypes from 'prop-types';
import { selectContacts } from 'redux/selectors/selectors';
import { addContact } from 'redux/constacts/operations';

import { FormStyle, LabelStyled, InputStyle, BodyStyle } from './FormStyle.module';
import ButtonSbmt from 'components/ButtonSbmt/ButtonSbmt';

import { ToastContainer } from 'react-toastify';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export const ContactForm = ({ onCloseModal }) => {
 
  const dispatch = useDispatch();
  const contacts = useSelector(selectContacts);

// –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
  const Submiter = event => {
    event.preventDefault();
    const form = event.target;
    const formName = event.target.elements.name.value;
    const formNumber = event.target.elements.number.value;
    if (contacts.some(({ name }) => name === formName)) {
      toast.warn(`ü•Å –£–≤–∞–∂–Ω—ñ—à–µ, ${formName}  –≤–∂–µ –Ñ –≤ –∫–æ–Ω–¢–ê–ö—Ç–∞—Ö ü•Å`);
    }
// console.log(formNumber, formNumber);
    dispatch(addContact({ name: formName, number: formNumber.toString() }))
      .unwrap()
      .then(originalPromiseResult => {
        toast.success(
          `ü•Å${originalPromiseResult.name} —Ç–µ–ø–µ—Ä –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Öü•Å`
        );
      })
      .catch(() => {
        toast.warn(`‚õî–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞‚õî`);
      });

    onCloseModal();
    form.reset();
  };

  return (
    <>
      <ToastContainer
        position="top-right"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />
    
      <FormStyle onSubmit={Submiter} autoComplete="off">
      <BodyStyle>
        <LabelStyled>
          –Ü–º'—è üìå
          <InputStyle
            type="text"
            name="name"
            // pattern= "^[a-zA-Z–∞-—è–ê-–Ø]+(([' -][a-zA-Z–∞-—è–ê-–Ø ])?[a-zA-Z–∞-—è–ê-–Ø]*)*$"
            //  —Ç–∞–∫ —á–æ–º—É—Å—å –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—ñ
            title="–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ, —Ç–∏—Ä–µ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –ê–¥—Ä—ñ–∞–Ω, –î–∂–µ–π–∫–æ–± –ú–µ—Ä—Å–µ—Ä, –®–∞—Ä–ª—å –¥–µ –ë–∞—Ü –¥–µ –ö–∞—Å—Ç–µ–ª—å–º–æ—Ä –¥'–ê—Ä—Ç–∞–Ω—å—è–Ω"
            required
            placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è..."
            value={contacts.name}
          />
        </LabelStyled>
        </BodyStyle>

        <BodyStyle>
        <LabelStyled>
          –ù–æ–º–µ—Ä üìû
          <InputStyle
            type="tel"
            name="number"
            // pattern= "\+?\d{1,4}?[-.\s]?\(?\d{1,3}?\)?[-.\s]?\d{1,4}[-.\s]?\d{1,4}[-.\s]?\d{1,9}"
            // i —Ç–∞–∫ —á–æ–º—É—Å—å –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—ñ
            title="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ —Ü–∏—Ñ—Ä —ñ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏, —Ç–∏—Ä–µ, –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏ —Ç–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ +"
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É..."
            value={contacts.number}
          />
        </LabelStyled>
        </BodyStyle>
        <ButtonSbmt  />
      </FormStyle>
    </>
  );
};

ContactForm.propTypes = {
  onCloseModal: PropTypes.func.isRequired,
};
